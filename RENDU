                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 39
Nom, prénom 1: Vyshka, Tedi
Nom, prénom 2: Benabbas ,Ikram



Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Oui, ./dpll sudoku-4x4.cnf renvoit bien la réponse attendue.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ?
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Oui, nous avons utilisé la fonction 'filter_map' simplifie
avec un fonction filter qui verifie un par un que chaque liste
contient l: 
si oui la fonction renvoit None, et filter_map continue
sur le reste de la liste;
si non alors à l'aide d'une deuxième fonction 
simplifie_aux la fonction vérifie la prèsence du littéral -l
qui doit être supprimé.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Pas de fonction auxiliaire pour unitaire, la fonction traite un 'int list list' élément par élémént,
si la fonction trouve une liste avec un seul élément, elle renvoit ce élément,
sinon elle renvoit une exception Not_found.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.


Fonctions auxiliaires utilisées dans pur sont: List.Flatten afin de concatener toute les sous-liste de la liste 
clause, puis nous avons utilisé la fonction auxilaire is_pur l1 l2 afin de comparer tout les elements de l1 avec les elements de l2 
(par exemple : x un litteral dans l1... is_pur l1 l2 regarde si (not x) ne figure pas dans l2 si c'est le cas elle renvoie x 
sinon elle continue de tester tous les elements de l1) .

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

les deux fonctions `solveur_split` et `solveur_dpll_rec` montrent un comportement différent sur la formule de l'exemple_7_2.
En effet, elles retournent respectivement 'SAT 1 -2 0' et 'SAT -2 -3 0'. 
Explication : dans le cas de `solveur_dpll_rec` qui traite en priorité les clauses unitaires et pures tandis que `solveur_split` ne le fait pas et passe directement à l'étape split

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

Nous avons ajouté une ligne
"if(Array.length Sys.argv = 1) then failwith "Usage: ./dpll [.cnf file]" else ..."
pour expliquer l'usage du code si l'utilisateur lance ./dpll sans arguments.
(sinon le terminal affiche: Invalid_argument("index out of bounds"), ce qui n'est pas très claire)

---

--fin du fichier RENDU--
